// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jedib0t/go-prompter/prompt (interfaces: Prompter)
//
// Generated by this command:
//
//	mockgen -destination mocks/prompt/mock_prompter.go github.com/jedib0t/go-prompter/prompt Prompter
//
// Package mock_prompt is a generated GoMock package.
package mock_prompt

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	prompt "github.com/jedib0t/go-prompter/prompt"
	gomock "go.uber.org/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// ClearHistory mocks base method.
func (m *MockPrompter) ClearHistory() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearHistory")
}

// ClearHistory indicates an expected call of ClearHistory.
func (mr *MockPrompterMockRecorder) ClearHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearHistory", reflect.TypeOf((*MockPrompter)(nil).ClearHistory))
}

// CursorLocation mocks base method.
func (m *MockPrompter) CursorLocation() prompt.CursorLocation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorLocation")
	ret0, _ := ret[0].(prompt.CursorLocation)
	return ret0
}

// CursorLocation indicates an expected call of CursorLocation.
func (mr *MockPrompterMockRecorder) CursorLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorLocation", reflect.TypeOf((*MockPrompter)(nil).CursorLocation))
}

// History mocks base method.
func (m *MockPrompter) History() []prompt.HistoryCommand {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History")
	ret0, _ := ret[0].([]prompt.HistoryCommand)
	return ret0
}

// History indicates an expected call of History.
func (mr *MockPrompterMockRecorder) History() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockPrompter)(nil).History))
}

// IsActive mocks base method.
func (m *MockPrompter) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockPrompterMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockPrompter)(nil).IsActive))
}

// KeyMap mocks base method.
func (m *MockPrompter) KeyMap() prompt.KeyMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyMap")
	ret0, _ := ret[0].(prompt.KeyMap)
	return ret0
}

// KeyMap indicates an expected call of KeyMap.
func (mr *MockPrompterMockRecorder) KeyMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyMap", reflect.TypeOf((*MockPrompter)(nil).KeyMap))
}

// NumLines mocks base method.
func (m *MockPrompter) NumLines() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumLines")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumLines indicates an expected call of NumLines.
func (mr *MockPrompterMockRecorder) NumLines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumLines", reflect.TypeOf((*MockPrompter)(nil).NumLines))
}

// Prompt mocks base method.
func (m *MockPrompter) Prompt(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockPrompterMockRecorder) Prompt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockPrompter)(nil).Prompt), arg0)
}

// SendInput mocks base method.
func (m *MockPrompter) SendInput(arg0 []any, arg1 ...time.Duration) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendInput", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInput indicates an expected call of SendInput.
func (mr *MockPrompterMockRecorder) SendInput(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInput", reflect.TypeOf((*MockPrompter)(nil).SendInput), varargs...)
}

// SetAutoCompleter mocks base method.
func (m *MockPrompter) SetAutoCompleter(arg0 prompt.AutoCompleter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAutoCompleter", arg0)
}

// SetAutoCompleter indicates an expected call of SetAutoCompleter.
func (mr *MockPrompterMockRecorder) SetAutoCompleter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoCompleter", reflect.TypeOf((*MockPrompter)(nil).SetAutoCompleter), arg0)
}

// SetAutoCompleterContextual mocks base method.
func (m *MockPrompter) SetAutoCompleterContextual(arg0 prompt.AutoCompleter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAutoCompleterContextual", arg0)
}

// SetAutoCompleterContextual indicates an expected call of SetAutoCompleterContextual.
func (mr *MockPrompterMockRecorder) SetAutoCompleterContextual(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoCompleterContextual", reflect.TypeOf((*MockPrompter)(nil).SetAutoCompleterContextual), arg0)
}

// SetCommandShortcuts mocks base method.
func (m *MockPrompter) SetCommandShortcuts(arg0 map[prompt.KeySequence]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommandShortcuts", arg0)
}

// SetCommandShortcuts indicates an expected call of SetCommandShortcuts.
func (mr *MockPrompterMockRecorder) SetCommandShortcuts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommandShortcuts", reflect.TypeOf((*MockPrompter)(nil).SetCommandShortcuts), arg0)
}

// SetDebug mocks base method.
func (m *MockPrompter) SetDebug(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDebug", arg0)
}

// SetDebug indicates an expected call of SetDebug.
func (mr *MockPrompterMockRecorder) SetDebug(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebug", reflect.TypeOf((*MockPrompter)(nil).SetDebug), arg0)
}

// SetFooter mocks base method.
func (m *MockPrompter) SetFooter(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFooter", arg0)
}

// SetFooter indicates an expected call of SetFooter.
func (mr *MockPrompterMockRecorder) SetFooter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFooter", reflect.TypeOf((*MockPrompter)(nil).SetFooter), arg0)
}

// SetFooterGenerator mocks base method.
func (m *MockPrompter) SetFooterGenerator(arg0 prompt.LineGenerator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFooterGenerator", arg0)
}

// SetFooterGenerator indicates an expected call of SetFooterGenerator.
func (mr *MockPrompterMockRecorder) SetFooterGenerator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFooterGenerator", reflect.TypeOf((*MockPrompter)(nil).SetFooterGenerator), arg0)
}

// SetHeader mocks base method.
func (m *MockPrompter) SetHeader(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", arg0)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPrompterMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPrompter)(nil).SetHeader), arg0)
}

// SetHeaderGenerator mocks base method.
func (m *MockPrompter) SetHeaderGenerator(arg0 prompt.LineGenerator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeaderGenerator", arg0)
}

// SetHeaderGenerator indicates an expected call of SetHeaderGenerator.
func (mr *MockPrompterMockRecorder) SetHeaderGenerator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeaderGenerator", reflect.TypeOf((*MockPrompter)(nil).SetHeaderGenerator), arg0)
}

// SetHistory mocks base method.
func (m *MockPrompter) SetHistory(arg0 []prompt.HistoryCommand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHistory", arg0)
}

// SetHistory indicates an expected call of SetHistory.
func (mr *MockPrompterMockRecorder) SetHistory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHistory", reflect.TypeOf((*MockPrompter)(nil).SetHistory), arg0)
}

// SetHistoryExecPrefix mocks base method.
func (m *MockPrompter) SetHistoryExecPrefix(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHistoryExecPrefix", arg0)
}

// SetHistoryExecPrefix indicates an expected call of SetHistoryExecPrefix.
func (mr *MockPrompterMockRecorder) SetHistoryExecPrefix(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHistoryExecPrefix", reflect.TypeOf((*MockPrompter)(nil).SetHistoryExecPrefix), arg0)
}

// SetHistoryListPrefix mocks base method.
func (m *MockPrompter) SetHistoryListPrefix(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHistoryListPrefix", arg0)
}

// SetHistoryListPrefix indicates an expected call of SetHistoryListPrefix.
func (mr *MockPrompterMockRecorder) SetHistoryListPrefix(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHistoryListPrefix", reflect.TypeOf((*MockPrompter)(nil).SetHistoryListPrefix), arg0)
}

// SetInput mocks base method.
func (m *MockPrompter) SetInput(arg0 io.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInput", arg0)
}

// SetInput indicates an expected call of SetInput.
func (mr *MockPrompterMockRecorder) SetInput(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInput", reflect.TypeOf((*MockPrompter)(nil).SetInput), arg0)
}

// SetKeyMap mocks base method.
func (m *MockPrompter) SetKeyMap(arg0 prompt.KeyMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeyMap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeyMap indicates an expected call of SetKeyMap.
func (mr *MockPrompterMockRecorder) SetKeyMap(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyMap", reflect.TypeOf((*MockPrompter)(nil).SetKeyMap), arg0)
}

// SetOutput mocks base method.
func (m *MockPrompter) SetOutput(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutput", arg0)
}

// SetOutput indicates an expected call of SetOutput.
func (mr *MockPrompterMockRecorder) SetOutput(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutput", reflect.TypeOf((*MockPrompter)(nil).SetOutput), arg0)
}

// SetPrefix mocks base method.
func (m *MockPrompter) SetPrefix(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrefix", arg0)
}

// SetPrefix indicates an expected call of SetPrefix.
func (mr *MockPrompterMockRecorder) SetPrefix(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefix", reflect.TypeOf((*MockPrompter)(nil).SetPrefix), arg0)
}

// SetPrefixer mocks base method.
func (m *MockPrompter) SetPrefixer(arg0 prompt.Prefixer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrefixer", arg0)
}

// SetPrefixer indicates an expected call of SetPrefixer.
func (mr *MockPrompterMockRecorder) SetPrefixer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefixer", reflect.TypeOf((*MockPrompter)(nil).SetPrefixer), arg0)
}

// SetRefreshInterval mocks base method.
func (m *MockPrompter) SetRefreshInterval(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRefreshInterval", arg0)
}

// SetRefreshInterval indicates an expected call of SetRefreshInterval.
func (mr *MockPrompterMockRecorder) SetRefreshInterval(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshInterval", reflect.TypeOf((*MockPrompter)(nil).SetRefreshInterval), arg0)
}

// SetStyle mocks base method.
func (m *MockPrompter) SetStyle(arg0 prompt.Style) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStyle", arg0)
}

// SetStyle indicates an expected call of SetStyle.
func (mr *MockPrompterMockRecorder) SetStyle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStyle", reflect.TypeOf((*MockPrompter)(nil).SetStyle), arg0)
}

// SetSyntaxHighlighter mocks base method.
func (m *MockPrompter) SetSyntaxHighlighter(arg0 prompt.SyntaxHighlighter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSyntaxHighlighter", arg0)
}

// SetSyntaxHighlighter indicates an expected call of SetSyntaxHighlighter.
func (mr *MockPrompterMockRecorder) SetSyntaxHighlighter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSyntaxHighlighter", reflect.TypeOf((*MockPrompter)(nil).SetSyntaxHighlighter), arg0)
}

// SetTerminationChecker mocks base method.
func (m *MockPrompter) SetTerminationChecker(arg0 prompt.TerminationChecker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTerminationChecker", arg0)
}

// SetTerminationChecker indicates an expected call of SetTerminationChecker.
func (mr *MockPrompterMockRecorder) SetTerminationChecker(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTerminationChecker", reflect.TypeOf((*MockPrompter)(nil).SetTerminationChecker), arg0)
}

// SetWidthEnforcer mocks base method.
func (m *MockPrompter) SetWidthEnforcer(arg0 prompt.WidthEnforcer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWidthEnforcer", arg0)
}

// SetWidthEnforcer indicates an expected call of SetWidthEnforcer.
func (mr *MockPrompterMockRecorder) SetWidthEnforcer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWidthEnforcer", reflect.TypeOf((*MockPrompter)(nil).SetWidthEnforcer), arg0)
}

// Style mocks base method.
func (m *MockPrompter) Style() *prompt.Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Style")
	ret0, _ := ret[0].(*prompt.Style)
	return ret0
}

// Style indicates an expected call of Style.
func (mr *MockPrompterMockRecorder) Style() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Style", reflect.TypeOf((*MockPrompter)(nil).Style))
}
